<controls:MetroWindow x:Class="Spawn.HDT.DustUtility.UI.Dialogs.SettingsDialogView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:components="clr-namespace:Spawn.HDT.DustUtility.UI.Components"
        xmlns:vm="clr-namespace:Spawn.HDT.DustUtility.UI.ViewModels"
        vm:ViewModelLocator.ViewModelName="SettingsDialogViewModel"
        mc:Ignorable="d" WindowStartupLocation="CenterOwner" BorderBrush="{DynamicResource AccentColorBrush}"
        Title="{Binding WindowTitle}" SizeToContent="WidthAndHeight" ResizeMode="NoResize" GlowBrush="Black">
    <Window.Resources>
        <ResourceDictionary>
            <Style x:Key="CustomButtonStyle" BasedOn="{StaticResource AccentedSquareButtonStyle}" TargetType="{x:Type Button}">
                <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
            </Style>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Spawn.HDT.DustUtility;component/Resources/CustomToolTipStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <StackPanel Orientation="Vertical" Margin="5" Width="230">
        <DockPanel Height="30" ToolTip="Access your decks and collection while Hearthstone is not running." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding OfflineModeLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox Name="cbOfflineMode" IsChecked="{Binding OfflineMode, Mode=TwoWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0"/>
        </DockPanel>
        <DockPanel Height="30" ToolTip="With 'Offline Mode' enabled, collection and decks are saved each X seconds while Hearthstone is running." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding SaveIntervalLabelText}" IsEnabled="{Binding ElementName=cbOfflineMode, Path=IsChecked}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <TextBox Name="tbSaveInterval" IsEnabled="{Binding ElementName=cbOfflineMode, Path=IsChecked}" VerticalAlignment="Center" HorizontalAlignment="Right" Width="50" TextAlignment="Right" Margin="0,0,10,0">
                <TextBox.Text>
                    <Binding Path="SaveInterval" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <components:NumericValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </DockPanel>
        <Separator Height="1" Background="{DynamicResource AccentColorBrush}" Margin="5"/>
        <DockPanel Height="30" ToolTip="Save the search term for the current account when closing the main window." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding RememberQueryStringLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox IsChecked="{Binding RememberQueryString, Mode=TwoWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0"/>
        </DockPanel>
        <DockPanel Height="30" ToolTip="!!! USE AT YOUR OWN RISK !!!&#x0a;Enable the option to let the plugin disenchant the current card selection automatically.&#x0a;(Works like the old HDT export feature)" ToolTipService.ShowDuration="8000">
            <Label Content="{Binding AutoDisenchantingLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox Name="AutoDisenchantingCheckBox" IsChecked="{Binding AutoDisenchanting, Mode=OneWayToSource}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0" Checked="OnAutoDisenchantingCheckBoxChecked"/>
        </DockPanel>
        <DockPanel Height="30" ToolTip="Use colored labels for the card items." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding ColoredCardLabelsLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox IsChecked="{Binding ColoredCardLabels, Mode=TwoWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0"/>
        </DockPanel>
        <Separator Height="1" Background="{DynamicResource AccentColorBrush}" Margin="5"/>
        <DockPanel Height="30" ToolTip="Check and display a notification wether a new release is available after opening the main window." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding CheckForUpdatesLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox IsChecked="{Binding CheckForUpdates, Mode=TwoWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0"/>
        </DockPanel>
        <DockPanel Height="30" ToolTip="Display notifications using the HSReplay notification system." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding ShowNotificationsLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <CheckBox IsChecked="{Binding ShowNotifications, Mode=TwoWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0"/>
        </DockPanel>
        <DockPanel Height="30" ToolTip="Only log messages with the specified log level or have a log level below the specified one." ToolTipService.ShowDuration="8000">
            <Label Content="{Binding LogLevelLabelText}" VerticalAlignment="Center" Margin="5,0,0,0"/>
            <ComboBox ItemsSource="{Binding LogLevels}" SelectedItem="{Binding LogLevel}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,10,0"/>
        </DockPanel>

        <WrapPanel VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,20,5,5">
            <Button Content="_Ok" IsDefault="True" Command="{Binding SaveSettingsCommand}" Click="OnOkClick" Width="75" Margin="0,0,10,0" Height="28">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonStyle}">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=tbSaveInterval, Path=(Validation.HasError)}" Value="False">
                                <Setter Property="IsEnabled" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Style="{DynamicResource CustomButtonStyle}" Content="_Cancel" IsCancel="True" Width="75" Height="28"/>
        </WrapPanel>
    </StackPanel>
</controls:MetroWindow>
